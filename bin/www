#!/usr/bin/env node

/**
 * Module dependencies.
 */

//returning express app and an object containing app and server
var app = require('../app').app;
var debug = require('debug')('picto-chat:server');
var http = require('http');



 // * Socket.io
 // */
sockets = require("../routes/sockets"); 
io = require('socket.io').listen(server);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7080');
app.set('port', port);




// var express = require('express'),
//     router = express.Router(),
//     app = express(),
//     server = require('http').createServer(app),
//     http = require('http'),
//     name = 'picto-chat',
//     socketio = require('socket.io'),
//     //io is listening to the server
//     io = require('socket.io').listen(server);
//   //set a port for the app to run on
//   server.listen(3000);
//   console.log("listening on port 3000")

//   //import delivery and fs modules for file transfer, but not necessary for express however
//     dl  = require('delivery'),
//     fs = require('fs');


/**


// io.listen(server);


/**
 * Create HTTP server.
 */

//require the instance we created in app.js that now contains our socket.io server as well.
// server = require('http').createServer(app);
var server = require('../app').server;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Create HTTP server.
 */

// var server = http.createServer(app);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}